@using Agience.Authority.Manage.Components.Shared
@using Agience.Authority.Manage.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities

@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authenticationStateProvider
@inject AuthorityService _authorityService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService
@inject ILogger<MainLayout> _logger

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<CascadingValue Value="_isDarkMode">
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
            <a href="/"><MudImage Src="@(_isDarkMode ? "/agience-logo-white.png" : "/agience-logo-color.png")" Class="header-logo" /></a>
            <MudSpacer />
            <MudTooltip Text="@themeModeTooltip">
                <MudIconButton Icon="@DarkLightModeButtonIcon" Color="Color.Inherit" OnClick="DarkModeToggle" Class="mr-2" />
            </MudTooltip>
            @if (User?.Identity?.IsAuthenticated ?? false)
            {
                <MudAvatar Size="Size.Medium" Color="Color.Info" Variant="Variant.Outlined" Class="mr-2">@User?.Identity?.Name?[0]</MudAvatar>
                <MudText Typo="Typo.subtitle2" Class="mr-2">@User?.Identity?.Name</MudText>
                <MudTooltip Text="Logout">
                    <MudIconButton Icon="@Icons.Material.Rounded.Logout" Color="Color.Primary" OnClick="SignOut" />
                </MudTooltip>
            }
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Variant="DrawerVariant.Mini">
            <NavMenu />
        </MudDrawer>
        <MudMainContent Class="mt-16 pa-4">
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private ClaimsPrincipal? User;
    private bool _sessionInactiveDialogShown = false;
    private string themeModeTooltip = "LightMode";

    protected override async Task OnInitializedAsync()
    {
        _theme = new MudTheme
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        // Get authentication state using AuthenticationStateProvider
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        if (User.Identity?.IsAuthenticated == true)
        {
            HandleReturnUrl();
        }
        else
        {
            _logger.LogWarning("User is not authenticated. Prompting for login.");
            ShowSessionLoginDialog();
        }
    }

    private void HandleReturnUrl()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrls))
        {
            var returnUrl = returnUrls.FirstOrDefault();
            if (!string.IsNullOrEmpty(returnUrl) && returnUrl != _navigationManager.Uri)
            {
                _navigationManager.NavigateTo(returnUrl);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckSessionStatus();
        }
    }

    private async Task CheckSessionStatus()
    {
        if (_sessionInactiveDialogShown) return;

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (!isAuthenticated)
        {
            _logger.LogWarning("User session is inactive. Prompting for login.");
            _sessionInactiveDialogShown = true;
            ShowSessionLoginDialog();
        }
    }

    private void ShowSessionLoginDialog()
    {
        var dialogOptions = new DialogOptions { CloseOnEscapeKey = false, BackdropClick = false, NoHeader = true };
        _dialogService.Show<SessionHandlerDialog>(null, dialogOptions);
    }

    private void SignOut()
    {
        _navigationManager.NavigateTo("/auth/signout", forceLoad: true);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        themeModeTooltip = _isDarkMode ? "LightMode" : "DarkMode";
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            Background = "#eeebf1",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode ? Icons.Material.Rounded.LightMode : Icons.Material.Outlined.DarkMode;
}
