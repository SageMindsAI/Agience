@using Agience.Authority.Manage.Models
@using Agience.Authority.Manage.Services
@using Agience.Core.Models.Entities.Abstract
@inject IDialogService DialogService

@typeparam TRecord where TRecord : BaseEntity, new()

<MudAutocomplete T="DescribedEntity"
                 Label="@Field.Label"
                 Placeholder="@Field.Placeholder"
                 SearchFunc="@SearchSuggestions"
                 Value="@(SelectedRecord)"
                 ValueChanged="@OnValueChanged"
                 ToStringFunc="item => item?.Name ?? string.Empty"
                 Clearable="true"
                 ResetValueOnEmptyText="true" 
                 Disabled ="@Field.ReadOnly"
                 />

@code {
    [Parameter] public FieldDefinition Field { get; set; } = default!;
    [Parameter] public TRecord Record { get; set; } = default!;
    [Parameter] public EventCallback OnRecordChanged { get; set; }
    [Parameter] public Func<IEnumerable<DescribedEntity>, Task>? OnFetchHook { get; set; }

    [Inject] private RecordHandler _recordHandler { get; set; } = null!;
    [Parameter] public HashSet<string> ExcludedValues { get; set; } = new();

    [Parameter] public Func<FieldDefinition, TRecord, Task<IEnumerable<DescribedEntity>>>? SearchSuggestionsDataSource { get; set; }


    private DescribedEntity? SelectedRecord
    {
        get
        {
            return Field.GetValue(Record) as DescribedEntity;
        }
        set
        {
            if (Record != null && Field != null)
            {
                Field.SetValue(Record, value);

                if (OnRecordChanged.HasDelegate)
                {
                    OnRecordChanged.InvokeAsync();
                }
            }
        }
    }



    private async Task<IEnumerable<DescribedEntity>> SearchSuggestions(string value, CancellationToken cancellationToken)
    {

        // TODO: Clean this up. We should have one unified way to fetch suggestions. Probably leaving it to the caller to provide a fetch function.

        if (SearchSuggestionsDataSource != null)
        {
            var records = await SearchSuggestionsDataSource.Invoke(Field, Record);
            if (OnFetchHook != null)
                await OnFetchHook.Invoke(records);
            return records;
        }

        if (Field.RelatedEntityDataSource != null)
        {
            var records = await Field.RelatedEntityDataSource.Invoke();

            if (OnFetchHook != null)
                await OnFetchHook.Invoke(records);

            return records;
        }

        var entity = EntityRegistry.GetEntityDefinitionByApiName(Field.RelatedEntityApiName);
        var suggestions = await _recordHandler.SearchRecordsAsync(entity, value, OnFetchHook);

        // Filter out excluded values
        return suggestions.Where(s => !ExcludedValues.Contains(s.Id));
    }

    private void OnValueChanged(DescribedEntity value)
    {
        SelectedRecord = value;
    }
}
