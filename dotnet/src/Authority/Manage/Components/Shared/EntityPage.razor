@using Agience.Core.Models.Entities.Abstract
@using Agience.Authority.Manage.Services
@typeparam TEntity where TEntity : NamedEntity, new()
@implements IDisposable

@if (_isLoading || !_isInitialized)
{
    <Loader />
}

<MudGrid @key="typeof(TEntity)" Spacing="2">
    <!-- Sidebar for Record List -->
    <MudItem xs="12" sm="2" md="2" Class="pl-0 pt-0 overflow-auto entity-page-left">
        <MudList T="NamedEntity">
            @foreach (var record in _records)
            {
                if (record.Id == "new")
                {
                    <MudContainer Class="d-flex justify-center align-center mt-2 mb-2">
                        <MudStack Direction="MudStackDirection.Vertical" AlignItems="AlignItems.Center" Spacing="2">
                            <MudFab OnClick="() => OnSelectItem(record)"
                            Class="@(IsSelected(record) ? (IsDarkMode ? "btn-primary dark-mode-highlight" : "btn-primary light-mode-highlight") : "btn-primary")"
                            StartIcon="@Icons.Material.Filled.Add" />
                        </MudStack>
                    </MudContainer>
                }
                else
                {
                    <MudCard Class="@(IsSelected(record) ? (IsDarkMode ? "mb-1 dark-mode-highlight" : "mb-1 light-mode-highlight") : "mb-1")">
                        <MudCardContent Class="pa-0">
                            <MudListItem OnClick="() => OnSelectItem(record)" Class="d-flex justify-center align-center">
                                <MudStack Direction="MudStackDirection.Vertical" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Size="Size.Large" Icon="@Icon" />
                                    <MudText Class="text-center">@record.Name</MudText>
                                </MudStack>
                            </MudListItem>
                        </MudCardContent>
                    </MudCard>
                }
            }
        </MudList>
    </MudItem>

    <!-- Main Content Area -->
    <MudItem xs="12" sm="10" md="10" Class="pt-0">
        <MudCard>
            <MudCardContent>
                @if (ChildContent != null)
                {
                    <MudTabs>
                        @ChildContent
                    </MudTabs>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>



@code {
    [CascadingParameter] private bool IsDarkMode { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Func<IEnumerable<TEntity>, Task>? OnFetchHook { get; set; }

    [Inject] private ContextService _contextService { get; set; } = null!;


    private bool _isLoading = false;
    private bool _isInitialized = false;

    private List<TEntity> _records = null!;

    protected override async Task OnInitializedAsync()
    {
        _contextService.ContextRecordIdChanged += OnContextRecordIdChanged;
        _contextService.RecordsUpdated += OnRecordsUpdated;

        try
        {
            if (_records == null)
            {                
                _isLoading = true;
                await _contextService.SetContext<TEntity>(null);
                await _contextService.FetchRecordsAsync<TEntity>();
            }            
        }
        finally
        {
            _isInitialized = true;
            _isLoading = false;
        }
    }

    public void Dispose()
    {
        _contextService.ContextRecordIdChanged -= OnContextRecordIdChanged;
        _contextService.RecordsUpdated -= OnRecordsUpdated;
    }

    private async Task OnContextRecordIdChanged(string? newRecordId)
    {
        if (newRecordId != null)
        {
            _records = _contextService.Records.Cast<TEntity>().ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnRecordsUpdated(Type parentType)
    {
        if (parentType == typeof(TEntity))
        {
            _records = _contextService.Records.Cast<TEntity>().ToList();

            if (_records.Any() && string.IsNullOrEmpty(_contextService.ContextRecordId))
            {
                await _contextService.SetContext<TEntity>(_records.First().Id);
            }

            await InvokeAsync(StateHasChanged);            
        }
    }

    private async Task OnSelectItem(TEntity record)
    {
        try
        {
            _isLoading = true;
            await _contextService.SetContext<TEntity>(record.Id);
        }
        finally
        {
            _isLoading = false;
        }
        await Task.CompletedTask;
    }

    private bool IsSelected(TEntity record) => record.Id == _contextService.ContextRecordId;
}
