// <auto-generated />
using System;
using Agience.Authority.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Agience.Authority.Identity.Migrations
{
    [DbContext(typeof(AgienceDbContext))]
    [Migration("20241025234454_migration_202691761")]
    partial class migration_202691761
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "director_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Agencies", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "agencies");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agency_id");

                    b.Property<int?>("AutoStartFunctionCompletionAction")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "auto_start_function_completion_action");

                    b.Property<string>("AutoStartFunctionName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "auto_start_function_name");

                    b.Property<string>("ChatCompletionFunctionName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "chat_completion_function_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("HostId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_enabled");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Persona")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "persona");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("HostId");

                    b.ToTable("Agents", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "agents");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentConnection", b =>
                {
                    b.Property<string>("PluginConnectionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_connection_id");

                    b.Property<string>("AgentId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<string>("AuthorizerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorizer_id");

                    b.Property<string>("CredentialId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "credential_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.HasKey("PluginConnectionId", "AgentId");

                    b.HasIndex("AgentId");

                    b.HasIndex("AuthorizerId");

                    b.HasIndex("CredentialId");

                    b.ToTable("AgentConnections", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "connections");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentPlugin", b =>
                {
                    b.Property<string>("AgentId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<string>("PluginId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("AgentId", "PluginId");

                    b.HasIndex("PluginId");

                    b.ToTable("AgentPlugins", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Authorizer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("AuthType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_type");

                    b.Property<string>("AuthUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_uri");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "manager_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scope");

                    b.Property<string>("TokenUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_uri");

                    b.Property<int?>("Visibility")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Authorizers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "authorizers");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Credential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "secret");

                    b.HasKey("Id");

                    b.ToTable("Credentials", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "prompt");

                    b.HasKey("Id");

                    b.ToTable("Functions", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "operator_id");

                    b.Property<string>("PostLogoutUris")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "post_logout_uris");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_uris");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Hosts", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "hosts");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.HostPlugin", b =>
                {
                    b.Property<string>("HostId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<string>("PluginId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("HostId", "PluginId");

                    b.HasIndex("PluginId");

                    b.ToTable("HostPlugins", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("SaltedValue")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "salted_value");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Keys", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "keys");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "last_login");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "last_name");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "provider_id");

                    b.Property<string>("ProviderPersonId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "provider_person_id");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Plugin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<NpgsqlTsVector>("DescriptionSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DescriptionSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DescriptionSearchVector"), "GIN");

                    b.ToTable("Plugins", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PluginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("Id");

                    b.HasIndex("PluginId");

                    b.ToTable("PluginConnections", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "connections");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginFunction", b =>
                {
                    b.Property<string>("PluginId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.Property<string>("FunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "function_id");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_root");

                    b.HasKey("PluginId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.ToTable("PluginFunctions", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "plugin_functions");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agency", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Director")
                        .WithMany("Agencies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agency", "Agency")
                        .WithMany("Agents")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany("Agents")
                        .HasForeignKey("HostId");

                    b.Navigation("Agency");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentConnection", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany("Connections")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Authorizer", "Authorizer")
                        .WithMany()
                        .HasForeignKey("AuthorizerId");

                    b.HasOne("Agience.Authority.Identity.Models.Credential", "Credential")
                        .WithMany()
                        .HasForeignKey("CredentialId");

                    b.HasOne("Agience.Authority.Identity.Models.PluginConnection", "PluginConnection")
                        .WithMany()
                        .HasForeignKey("PluginConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Authorizer");

                    b.Navigation("Credential");

                    b.Navigation("PluginConnection");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentPlugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Authorizer", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Manager")
                        .WithMany("Authorizers")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Operator")
                        .WithMany("Hosts")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.HostPlugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Key", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany("Keys")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Log", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Plugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Creator")
                        .WithMany("Plugins")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginConnection", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany("Connections")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginFunction", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Function", "Function")
                        .WithMany("PluginFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany("PluginFunctions")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agency", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Function", b =>
                {
                    b.Navigation("PluginFunctions");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Keys");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Person", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("Authorizers");

                    b.Navigation("Hosts");

                    b.Navigation("Plugins");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Plugin", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("PluginFunctions");
                });
#pragma warning restore 612, 618
        }
    }
}
