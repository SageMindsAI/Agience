// <auto-generated />
using System;
using Agience.Authority.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agience.Authority.Identity.Migrations
{
    [DbContext(typeof(AgienceDbContext))]
    [Migration("20250223052320_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AutoStartFunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "auto_start_function_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ExecutiveFunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "executive_function_id");

                    b.Property<string>("HostId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("OnAutoStartFunctionComplete")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "on_auto_start_function_complete");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("Persona")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "persona");

                    b.HasKey("Id");

                    b.HasIndex("AutoStartFunctionId");

                    b.HasIndex("ExecutiveFunctionId");

                    b.HasIndex("HostId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Agents", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "agents");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentLogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("LogText")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "log_text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentLogEntries", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "log_entries");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentPlugin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("PluginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("Id");

                    b.HasIndex("PluginId");

                    b.HasIndex("AgentId", "PluginId");

                    b.ToTable("AgentPlugins", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentTopic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AgentId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("TopicId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "topic_id");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("AgentId", "TopicId");

                    b.ToTable("AgentTopics", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Authorizer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Public")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_type");

                    b.Property<string>("AuthUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_uri");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("TokenUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_uri");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Private")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Authorizers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "authorizer");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Connection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("ResourceUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_uri");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Private")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Connections", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "connection");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.ConnectionAuthorizer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AuthorizerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorizer_id");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "connection_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizerId");

                    b.HasIndex("ConnectionId", "AuthorizerId");

                    b.ToTable("ConnectionAuthorizers", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Credential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "access_token");

                    b.Property<string>("AgentId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "agent_id");

                    b.Property<string>("AuthorizerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorizer_id");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "connection_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "expiry_date");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "refresh_token");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NoAuthorizer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AuthorizerId");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Credentials", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "instruction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Functions", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "functions");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.FunctionConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "connection_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("FunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "function_id");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("FunctionId", "ConnectionId");

                    b.ToTable("FunctionConnections", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("PostLogoutUris")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "post_logout_uris");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_uris");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Private")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Hosts", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "hosts");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.HostPlugin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("HostId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<string>("PluginId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("Id");

                    b.HasIndex("PluginId");

                    b.HasIndex("HostId", "PluginId");

                    b.ToTable("HostPlugins", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("HostId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "host_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("SaltedValue")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "salted_value");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Keys", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "keys");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Parameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("FunctionId")
                        .HasColumnType("text");

                    b.Property<string>("InputFunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "input_function_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OutputFunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "output_function_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("InputFunctionId");

                    b.HasIndex("OutputFunctionId");

                    b.ToTable("Parameters", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "outputs");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "last_login");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "last_name");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "provider_id");

                    b.Property<string>("ProviderPersonId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "provider_person_id");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Plugin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("PluginProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Prompt")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_provider");

                    b.Property<string>("PluginSource")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UserDefined")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_source");

                    b.Property<string>("UniqueName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "unique_name");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Private")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Plugins", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "plugins");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginFunction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("FunctionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "function_id");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_root");

                    b.Property<string>("PluginId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "plugin_id");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("PluginId", "FunctionId");

                    b.ToTable("PluginFunctions", (string)null);
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_id");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Private")
                        .HasAnnotation("Relational:JsonPropertyName", "visibility");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Topics", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "topics");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Function", "AutoStartFunction")
                        .WithMany()
                        .HasForeignKey("AutoStartFunctionId");

                    b.HasOne("Agience.Authority.Identity.Models.Function", "ExecutiveFunction")
                        .WithMany()
                        .HasForeignKey("ExecutiveFunctionId");

                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany("Agents")
                        .HasForeignKey("HostId");

                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Agents")
                        .HasForeignKey("OwnerId");

                    b.Navigation("AutoStartFunction");

                    b.Navigation("ExecutiveFunction");

                    b.Navigation("Host");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentLogEntry", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany("LogEntries")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentPlugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.AgentTopic", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Agience.Authority.Identity.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.Navigation("Agent");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Authorizer", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Authorizers")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Connection", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Connections")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.ConnectionAuthorizer", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Authorizer", "Authorizer")
                        .WithMany()
                        .HasForeignKey("AuthorizerId");

                    b.HasOne("Agience.Authority.Identity.Models.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId");

                    b.Navigation("Authorizer");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Credential", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Agience.Authority.Identity.Models.Authorizer", "Authorizer")
                        .WithMany()
                        .HasForeignKey("AuthorizerId");

                    b.HasOne("Agience.Authority.Identity.Models.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId");

                    b.Navigation("Agent");

                    b.Navigation("Authorizer");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.FunctionConnection", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId");

                    b.HasOne("Agience.Authority.Identity.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.Navigation("Connection");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Hosts")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.HostPlugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId");

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId");

                    b.Navigation("Host");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Key", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Host", "Host")
                        .WithMany("Keys")
                        .HasForeignKey("HostId");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Parameter", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("Agience.Authority.Identity.Models.Function", null)
                        .WithMany("Inputs")
                        .HasForeignKey("InputFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Agience.Authority.Identity.Models.Function", null)
                        .WithMany("Outputs")
                        .HasForeignKey("OutputFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Plugin", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Plugins")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.PluginFunction", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("Agience.Authority.Identity.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId");

                    b.Navigation("Function");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Topic", b =>
                {
                    b.HasOne("Agience.Authority.Identity.Models.Person", "Owner")
                        .WithMany("Topics")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Agent", b =>
                {
                    b.Navigation("LogEntries");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Function", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Host", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Keys");
                });

            modelBuilder.Entity("Agience.Authority.Identity.Models.Person", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Authorizers");

                    b.Navigation("Connections");

                    b.Navigation("Hosts");

                    b.Navigation("Plugins");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
